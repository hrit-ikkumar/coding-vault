{"version":3,"sources":["logo.svg","Components/Codemirror_Component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","defaults","c","cpp","java","javascript","python","Codemirror_Component","props","handleSubmit","event","router_end_point","preventDefault","state","mode","fetch","method","body","JSON","stringify","headers","credentials","then","response","json","data","console","log","document","getElementById","innerHTML","code","theme","source_code","test_cases","newCode","this","setState","e","target","value","options","lineNumbers","extraKeys","onChange","updateCode","editor","style","margin","changeMode","bind","changeTheme","onSubmit","type","id","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,4NCO3CC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IAER,IAAIC,EAAW,CACbC,EAAI,iFACJC,IAAK,gGACLC,KAAM,2GACNC,WAAY,8BACZC,OAAO,yBAsHMC,E,kDAjHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8BRC,aAAe,SAACC,GAGd,IAAIC,EAFJD,EAAME,iBAIJD,EADoB,QAAnB,EAAKE,MAAMC,KACO,QACM,UAAnB,EAAKD,MAAMC,KACE,MACM,KAAnB,EAAKD,MAAMC,KACE,KACM,OAAnB,EAAKD,MAAMC,KACE,QACb,EAAKD,MAAMC,KACE,OAIrBC,MADc,qCACEJ,EAAkB,CAChCK,OAAQ,OAERC,KAAMC,KAAKC,UAAU,EAAKN,OAC1BO,QAAS,CACP,eAAgB,oBAElBC,YAAa,gBAEdC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEFC,QAAQC,IAAIF,GACZG,SAASC,eAAe,kBAAkBC,UAAYZ,KAAKC,UAAUM,OA3DzE,EAAKZ,MAAQ,CACXkB,KAAM9B,EAASC,EACf8B,MAAM,WACNlB,KAAM,IACNmB,YAAYhC,EAASC,EACrBgC,WAAW,MAPI,E,uDAWRC,GACTT,QAAQC,IAAIQ,GACdC,KAAKC,SAAS,CACbN,KAAMI,M,iCAGKG,GACVZ,QAAQC,IAAIW,EAAEC,OAAOC,OACrB,IAAI1B,EAAOwB,EAAEC,OAAOC,MACpBJ,KAAKC,SAAS,CACZN,KAAM9B,EAASa,GACfA,KAAMA,M,kCAGGwB,GACX,IAAIN,EAAQM,EAAEC,OAAOC,MACrBJ,KAAKC,SAAS,CACZL,MAAMA,M,+BAoCD,IAAD,OACJS,EAAU,CACZC,aAAa,EACb5B,KAAMsB,KAAKvB,MAAMC,KACjBkB,MAAMI,KAAKvB,MAAMmB,MACjBW,UAAW,CAAC,KAAQ,iBAEtB,OACI,6BACE,kBAAC,eAAD,aACEH,MAAOJ,KAAKvB,MAAMkB,KAClBa,SAAUR,KAAKS,WACfJ,QAASA,GAHX,YAIY,SAACK,EAAQrB,EAAMe,GACvB,EAAKH,SAAS,CACVJ,YAAYO,QAIpB,yBAAKO,MAAO,CAAEC,OAAQ,KACpB,4BAAQJ,SAAUR,KAAKa,WAAWC,KAAKd,MAAOI,MAAOJ,KAAKvB,MAAMC,MAC9D,4BAAQ0B,MAAM,KAAd,KAGA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,UAAd,WAEF,4BAAQI,SAAUR,KAAKe,YAAYD,KAAKd,MAAOI,MAAOJ,KAAKvB,MAAMmB,OAC/D,4BAAQQ,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,aAIJ,0BAAOY,SAAUhB,KAAK3B,cACpB,4BAAQ4C,KAAK,UAAb,gBAGF,6BACE,2BAAIjB,KAAKvB,MAAMoB,cAGjB,6BACE,wCACA,uBAAGqB,GAAG,yB,GA5GmBC,IAAMC,WCP1BC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAY,WACf,6CAEF,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.2e8fe391.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/theme/monokai.css';\r\nimport Submit_Component from './Submit_Component'\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/javascript/javascript');\r\nrequire('codemirror/addon/hint/anyword-hint.js');\r\nrequire('codemirror/addon/hint/javascript-hint');\r\nrequire('codemirror/addon/hint/show-hint');\r\nrequire('codemirror/mode/python/python');\r\nrequire('codemirror/mode/clike/clike');\r\n\r\nvar defaults = {\r\n  c:  '#include <stdio.h>\\n int main()\\n { \\n   printf(\\\"Hello World\\\");\\nreturn 0;\\n }',\r\n  cpp: '#include <iostream>\\n  int main()\\n {  \\n    std::cout << \\\"Hello World!\\\";\\n     return 0;\\n }',\r\n  java: 'public class Simple{  public static void main(String args[]){  System.out.println(\\\"Hello Java\\\");  }  }  ',\r\n  javascript: 'console.log(\"Hello World\");',\r\n  python:'print(\"Hello World!\")'\r\n};\r\n\r\n\r\nclass Codemirror_Component extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      code: defaults.c,\r\n      theme:'material',\r\n      mode: 'c',\r\n      source_code:defaults.c,\r\n      test_cases:'\\n'\r\n    };\r\n  }\r\n     \r\n\tupdateCode (newCode) {\r\n    console.log(newCode); \r\n\t\tthis.setState({\r\n\t\t\tcode: newCode\r\n\t\t});\r\n\t}\r\n  changeMode (e) {\r\n    console.log(e.target.value);\r\n    var mode = e.target.value;\r\n    this.setState({\r\n      code: defaults[mode],\r\n      mode: mode\r\n    });\r\n  }\r\n  changeTheme (e){\r\n    var theme = e.target.value;\r\n    this.setState({\r\n      theme:theme\r\n    });\r\n  }\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    //  localhost:8000/python\r\n    let router_end_point;\r\n    if(this.state.mode == 'java')\r\n      router_end_point = '/java';\r\n    else if(this.state.mode == 'python')\r\n      router_end_point = '/py';\r\n    else if(this.state.mode == 'c')\r\n      router_end_point = '/c';\r\n    else if(this.state.mode == 'cpp')\r\n      router_end_point = '/cpp';\r\n    else if(this.state.mode == 'javascript')\r\n      router_end_point = '/js';\r\n    else // by default javascript language\r\n      router_end_point = '/js';\r\n    let baseUrl = 'https://coding-vault.herokuapp.com';\r\n    fetch(baseUrl + router_end_point, {\r\n      method: 'POST',\r\n      // We convert the React state to JSON and send it as the POST body\r\n      body: JSON.stringify(this.state),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'same-origin'\r\n    }) \r\n    .then(response => response.json())\r\n    .then(data => \r\n      {\r\n        console.log(data);\r\n        document.getElementById('program_output').innerHTML = JSON.stringify(data);\r\n      });    \r\n  }\r\n  render(){ \r\n  var options = {\r\n    lineNumbers: true,\r\n    mode: this.state.mode,\r\n    theme:this.state.theme,\r\n    extraKeys: {\"Ctrl\": \"autocomplete\"}\r\n  };\r\n  return (\r\n      <div>\r\n        <CodeMirror\r\n          value={this.state.code} \r\n          onChange={this.updateCode}\r\n          options={options}\r\n          onChange={(editor, data, value) => {\r\n            this.setState({\r\n                source_code:value\r\n            }); \r\n          }}\r\n        />\r\n        <div style={{ margin: 10 }}>\r\n          <select onChange={this.changeMode.bind(this)} value={this.state.mode}>\r\n            <option value=\"c\">C</option>\r\n            {/*<option value=\"cpp\">CPP</option>\r\n            <option value=\"java\">Java</option> */}\r\n            <option value=\"javascript\">JavaScript</option>\r\n            <option value=\"python\">Python</option>\r\n          </select>\r\n          <select onChange={this.changeTheme.bind(this)} value={this.state.theme}>\r\n            <option value=\"material\">Material</option>\r\n            <option value=\"monokai\">Monokai</option>\r\n          </select>\r\n        </div>\r\n\r\n        <form  onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" >Submit Code</button>\r\n        </form>\r\n\r\n        <div>\r\n          <p>{this.state.source_code}</p>\r\n        </div>\r\n\r\n        <div>\r\n          <h5>Output: </h5>\r\n          <p id=\"program_output\"></p>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\nexport default Codemirror_Component;","import React from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css'\nimport Codemirror_Component from './Components/Codemirror_Component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className = \"heading\">\n        <h1>Coding Vault</h1>\n      </div>\n      <Codemirror_Component></Codemirror_Component>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}